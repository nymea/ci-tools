#!/bin/bash -e

if [ "$6" == "" ]; then
  echo "usage: $0 <git repo> <git branch> <destdir> <distro> <arch> <debug|release> <check|nocheck> <doc|nodoc> <version_append> [additional-repo ...]"
  echo "git repo:         The git repo to build"
  echo "git branch:       The git branch to build"
  echo "destdir:          The output directory"
  echo "distro:           The distro to build for (xenial, bionic, stretch, disco)"
  echo "arch:             The arch to build for (amd64, i386, arm64, armhf)"
  echo "debug|release:    The build mode"
  echo "check|nocheck:    Whether to run make check"
  echo "doc|nodoc:        Whether to build the -doc package (might fail for cross builds)"
  echo "additional repos: Additional dpkg repositories to be used for installing dependencies"
  exit 1
fi

GIT_REPO=$1
shift
GIT_BRANCH=$1
shift
DESTDIR=$1
shift
DISTRO=$1
shift
ARCH=$1
shift
DBGBUILD=$1
shift
TESTING=$1
shift
DOCS=$1
shift
VERSION_APPEND=$1
shift
ADDITIONAL_REPOS=$@


git clone $GIT_REPO $DESTDIR
cd $DESTDIR
git checkout $GIT_BRANCH
git submodule update --init


BUILD_PROFILES="cross noautodbgsym"
if [ "$DBGBUILD" == "debug" ]; then
  BUILD_PROFILES="$BUILD_PROFILES nostrip debug"
else
  BUILD_PROFILES="$BUILD_PROFILES strip"
fi
if [ "$TESTING" == "check" ]; then
  BUILD_PROFILES="$BUILD_PROFILES check coverage"
else
  BUILD_PROFILES="$BUILD_PROFILES nocheck"
fi
if [ "$DOCS" == "doc" ]; then
  BUILD_PROFILES="$BUILD_PROFILES doc"
else
  BUILD_PROFILES="$BUILD_PROFILES nodoc"
fi
export DEB_BUILD_PROFILES=$BUILD_PROFILES


source /opt/tools/build-tools

# Append distro to changelog
dch -U "" -l "$VERSION_APPEND~$DISTRO"
dch -r "" --distribution $DISTRO
sed -i '2,7d' debian/changelog

PREFIX=`uuidgen | head -c 4 ; echo`
CROSSBUILDER_ARGS="--container-prefix=x$PREFIX -u $DISTRO -a $ARCH -c"

REMOVE_FLAG=0
for repo in $ADDITIONAL_REPOS; do
  if "$repo" == "-r" ];
    REMOVE_FLAT=1
  elif [ $REMOVE_FLAG -eq 0 ]; then
    CROSSBUILDER_ARGS="$CROSSBUILDER_ARGS --add-repository $repo"
  else
    CROSSBUILDER_ARGS="$CROSSBUILDER_ARGS --remove-repository $repo"
  fi
done

# install a cleanup trap in case we fail
function finish {
  (
    # Wait for lock on /var/lock/.myscript.exclusivelock (fd 200) for 10 seconds
    flock -x -w 120 200 || exit 1

    crossbuilder $CROSSBUILDER_ARGS delete || true

  ) 200>/var/lock/.build-generic-deb.exclusivelock
}
trap finish EXIT

echo "Building with: crossbuilder $CROSSBUILDER_ARGS"
crossbuilder $CROSSBUILDER_ARGS delete || true
crossbuilder $CROSSBUILDER_ARGS dependencies
crossbuilder $CROSSBUILDER_ARGS build

tar xvf *.tar -C ..
